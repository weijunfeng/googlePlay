package org.itheima56.googleplay.fragment;

import org.itheima56.googleplay.R;

import android.content.Context;
import android.util.AttributeSet;
import android.view.View;
import android.widget.FrameLayout;

/**
 * @项目名: GooglePlay56
 * @包名: org.itheima56.googleplay.fragment
 * @类名: LoadingPager
 * @创建者: 肖琦
 * @创建时间: 2015-5-4 下午3:48:24
 * @描述: View 需要包含 加载中，空页面，错误界面，成功，并且控制他们是否显示
 * 
 * @svn版本: $Rev: 14 $
 * @更新人: $Author: xq $
 * @更新时间: $Date: 2015-05-04 16:25:02 +0800 (Mon, 04 May 2015) $
 * @更新描述: TODO
 */
public abstract class LoadingPager extends FrameLayout
{
	private final static int	STATE_LOADING	= 0;				// 加载中的状态
	private final static int	STATE_EMPTY		= 1;				// 空的状态
	private final static int	STATE_ERROR		= 2;				// 错误的状态
	private final static int	STATE_SUCCESS	= 3;				// 成功的状态

	private View				mLoadingView;
	private View				mEmptyView;
	private View				mErrorView;
	private View				mSuccessView;

	private int					mCurrentState	= STATE_LOADING;	// 默认是加载中的状态

	public LoadingPager(Context context) {
		super(context);

		initView();
	}

	public LoadingPager(Context context, AttributeSet attrs) {
		super(context, attrs);

		initView();
	}

	private void initView()
	{
		// 加载 （加载中，空页面，错误界面，成功）

		// 加载中
		if (mLoadingView == null)
		{
			mLoadingView = View.inflate(getContext(), R.layout.pager_loading, null);
			// 添加到容器中
			addView(mLoadingView);
		}

		// 空页面
		if (mEmptyView == null)
		{
			mEmptyView = View.inflate(getContext(), R.layout.pager_empty, null);
			// 添加到容器中
			addView(mEmptyView);
		}

		// 错误界面
		if (mErrorView == null)
		{
			mErrorView = View.inflate(getContext(), R.layout.pager_error, null);
			// 添加到容器中
			addView(mErrorView);
		}

		// 成功页面等数据加载成功后添加

		// 通过状态更新View的显示
		updateUI();
	}

	private void updateUI()
	{
		// if (mCurrentState == STATE_LOADING)
		// {
		// mLoadingView.setVisibility(View.VISIBLE);
		// }
		// else
		// {
		// mLoadingView.setVisibility(View.GONE);
		// }

		mLoadingView.setVisibility(mCurrentState == STATE_LOADING ? View.VISIBLE : View.GONE);
		mEmptyView.setVisibility(mCurrentState == STATE_EMPTY ? View.VISIBLE : View.GONE);
		mErrorView.setVisibility(mCurrentState == STATE_ERROR ? View.VISIBLE : View.GONE);

		if (mCurrentState == STATE_SUCCESS && mSuccessView == null)
		{
			// 需要创造成功的View
			mSuccessView = initSuccessView();
		}

		// 成功的view
		if (mSuccessView != null)
		{
			mSuccessView.setVisibility(mCurrentState == STATE_SUCCESS ? View.VISIBLE : View.GONE);
		}
	}

	/**
	 * 加载数据
	 */
	public void loadData()
	{
		new Thread(new LoadDataTask()).start();
	}

	/**
	 * 让子类实现
	 * 
	 * @return
	 */
	protected abstract View initSuccessView();

	protected abstract int onLoadData();

	class LoadDataTask implements Runnable
	{

		@Override
		public void run()
		{
			// 去加载数据
			// 数据加载成功没有
			int state = onLoadData();

			// 负责view切换---》 state
			mCurrentState = state;

			updateUI();
		}
	}

	public enum LoadedResult
	{
		
	}

}
